// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
	#[doc(alias = "ArvGcRegister")]
	pub struct GcRegister(Interface<ffi::ArvGcRegister, ffi::ArvGcRegisterInterface>);

	match fn {
		type_ => || ffi::arv_gc_register_get_type(),
	}
}

unsafe impl Send for GcRegister {}

pub const NONE_GC_REGISTER: Option<&GcRegister> = None;

/// Trait containing all [`struct@GcRegister`] methods.
///
/// # Implementors
///
/// [`GcFloatRegNode`][struct@crate::GcFloatRegNode], [`GcIntRegNode`][struct@crate::GcIntRegNode], [`GcMaskedIntRegNode`][struct@crate::GcMaskedIntRegNode], [`GcRegisterNode`][struct@crate::GcRegisterNode], [`GcRegister`][struct@crate::GcRegister], [`GcStringRegNode`][struct@crate::GcStringRegNode], [`GcStructEntryNode`][struct@crate::GcStructEntryNode], [`GcStructRegNode`][struct@crate::GcStructRegNode]
pub trait GcRegisterExt: 'static {
	//#[doc(alias = "arv_gc_register_get")]
	//fn get(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error>;

	#[doc(alias = "arv_gc_register_get_address")]
	#[doc(alias = "get_address")]
	fn address(&self) -> Result<u64, glib::Error>;

	#[doc(alias = "arv_gc_register_get_length")]
	#[doc(alias = "get_length")]
	fn length(&self) -> Result<u64, glib::Error>;

	//#[doc(alias = "arv_gc_register_set")]
	//fn set(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error>;
}

impl<O: IsA<GcRegister>> GcRegisterExt for O {
	//fn get(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error> {
	//    unsafe { TODO: call ffi:arv_gc_register_get() }
	//}

	fn address(&self) -> Result<u64, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret = ffi::arv_gc_register_get_address(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	fn length(&self) -> Result<u64, glib::Error> {
		unsafe {
			let mut error = ptr::null_mut();
			let ret = ffi::arv_gc_register_get_length(self.as_ref().to_glib_none().0, &mut error);
			if error.is_null() {
				Ok(ret)
			} else {
				Err(from_glib_full(error))
			}
		}
	}

	//fn set(&self, buffer: /*Unimplemented*/Option<Fundamental: Pointer>, length: u64) -> Result<(), glib::Error> {
	//    unsafe { TODO: call ffi:arv_gc_register_set() }
	//}
}

impl fmt::Display for GcRegister {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		f.write_str("GcRegister")
	}
}
